{"name":"jquery.easypin","tagline":"Simply pinning objects in pictures","body":"jQuery easypin\r\n===================\r\n\r\nSimple and fast image pinning plugin. There are dependencies with the library jQuery easing plugin.\r\nSupported lowest jQuery version 1.8\r\n\r\nDEMO\r\n========\r\n[Demo Page 1 (responsive)](http://atayahmet.github.io/jquery.easypin/demo1.html)\r\n\r\n[Demo Page 2 ](http://atayahmet.github.io/jquery.easypin/demo2.html)\r\n\r\n[Demo Page 3 ](http://atayahmet.github.io/jquery.easypin/demo3.html)\r\n\r\nQuick Start\r\n==============\r\n\r\n### bower install\r\n```sh\r\nbower install jquery.easypin\r\n```\r\n\r\n### npm install\r\n```sh\r\nnpm install jquery.easypin\r\n```\r\n\r\n### Load libraries\r\n\r\nFirst, include the jQuery and jQuery easing plugin javascript files.\r\n```html\r\n<script src=\"jquery.min.js\"></script>\r\n<script src=\"jquery.easing.min.js\"></script>\r\n<script src=\"jquery.easypin.min.js\"></script>\r\n```\r\n### Pin picture:\r\n```html\r\n<img src=\"example.jpg\" class=\"pin\" width=\"800\" easypin-id=\"example_image1\" />\r\n```\r\n\r\n\r\n|      option                  | type                    | description                                   |\r\n| ---------------------------- | ----------------------- | --------------------------------------------- |\r\n| easypin-id                   | `attribute`             | It will be the default value if not defined   |                                    \r\n\r\n### Dialog window for pin contents\r\n```html\r\n<div class=\"easy-modal\" style=\"display:none;\" modal-position=\"free\">\r\n    <form>\r\n        type something: <input name=\"content\" type=\"text\">\r\n        <input type=\"button\" value=\"save pin!\" class=\"easy-submit\">\r\n    </form>\r\n</div>\r\n```\r\n\r\n|      option                  | type                    | description                                      |\r\n| ---------------------------- | ----------------------- | ------------------------------------------------ |\r\n| easy-submit                  | `class`                 | Class must be defined to close the dialog window |    \r\n| modal-position               | `attribute`             | Dialog window free position (default: none)      |    \r\n\r\n\r\n### Popover\r\n```html\r\n<div style=\"display:none;\" width=\"130\" shadow=\"true\" popover>\r\n    <div style=\"width:100%;text-align:center;\">{[content]}</div>\r\n</div>\r\n```\r\n\r\n|      option                  | type                    | description                          |\r\n| ---------------------------- | ----------------------- | ------------------------------------ |\r\n| popover                      | `attribute`             | Popover initializer attribute (MUST) |    \r\n| width                        | `attribute`             | Popover width size (default: 200px)  |  \r\n| shadow                       | `attribute`             | Popover show style (default: false)  |\r\n\r\n### Initialize the pictures:\r\n```javascript\r\n// Back-end pin process\r\n$('.pin').easypin();\r\n```\r\n\r\nTo access the coordinates after pinning:\r\n```javascript\r\nvar $instance = $('.pin').easypin({\r\n    done: function(element) {\r\n        return true;\r\n    }\r\n});\r\n\r\n// set the 'get.coordinates' event\r\n$instance.easypin.event( \"get.coordinates\", function($instance, data, params ) {\r\n\r\n    console.log(data, params);\r\n\r\n});\r\n```\r\n\r\nThen you can run this event with a button click event\r\n```html\r\n<input class=\"coords\" type=\"button\" value=\"Get coordinates!\" />\r\n```\r\n\r\n```javascript\r\n$( \".coords\" ).click(function(e) {\r\n    $instance.easypin.fire( \"get.coordinates\", {param1: 1, param2: 2, param3: 3}, function(data) {\r\n        return JSON.stringify(data);\r\n    });\r\n});\r\n```\r\n\r\nWe pass parameters when calling the above coordinate the event. Before the callback to run.\r\n\r\n[Click for .easypin({}) options](#easypin-options)\r\n\r\n.easypinShow()\r\n=============\r\n We do first pin on the picture, now we show these pins to users on user interface.\r\n\r\n**Pin image:**\r\n ```html\r\n <img src=\"example.jpg\" class=\"pin\" width=\"800\" easypin-id=\"example_image1\" />\r\n ```\r\n> **Note:** If you want to get the width of the parent element's do not need define\r\n\r\n**Pin container and popover template:**\r\n```html\r\n<div style=\"display:none;\" easypin-tpl>\r\n    <popover>\r\n        <div style=\"width:140px;height:auto;background-color:orange;\">\r\n            {[content]}\r\n        </div>\r\n    </popover>\r\n\r\n    <marker>\r\n        <div style=\"border:solid 1px #000;width:20px;height:20px;background-color:red;\">&nbsp;</div>\r\n    </marker>\r\n</div>\r\n```\r\n\r\n|      option                  | type                    | description                          |\r\n| ---------------------------- | ----------------------- | ------------------------------------ |\r\n| easypin-tpl                  | `attribute`             | Marker and Popover container element |    \r\n| popover                      | `html tag`              | Popover container element            |\r\n| marker                       | `html tag`              | Marker container element             |\r\n\r\n**and run the .easypinShow() method:**\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {\r\n            \"example_image1\":{\r\n            \"0\":{\r\n                \"content\":\"Hello World!\",\r\n                \"coords\":{\r\n                    \"lat\":\"530\",\r\n                    \"long\":\"179\"\r\n                }\r\n            },\r\n            \"canvas\":{\r\n                \"src\":\"example.jpg\",\"width\":\"800\",\"height\":\"562\"\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\nThat's it!\r\n\r\n\r\n.easypin({}) options\r\n=================\r\n\r\n|      option                  | type                    | description                                                                |\r\n| ---------------------------- | ----------------------- | -------------------------------------------------------------------------- |\r\n| [init](#init)                | `object or json string` | initialize the pin coordinates                                             |\r\n| [markerSrc](#markerSrc)      | `string`                | Change the default marker image                                             |\r\n| [modalWidth](#modalWidth)  | `string/numeric`          | Change the default modal width (default: 200px)                                         |\r\n| [editSrc](#editSrc)          | `string`                | Change the default edit button image                                             |\r\n| [deleteSrc](#deleteSrc)      | `string`                | Change the default delete button image                                             |\r\n| [popover](#popover)          | `functions into object` | set callback all template variables                                        |\r\n| [popoverStyle](#popoverStyle)| `object`                | popover styles (it just pass to jquery .css() method of the object)        |\r\n| [limit](#limit)              | `integer`               | limited pin (default 0)                                                    |\r\n| [exceeded](#exceeded)        | `function`              | limit exceeded event                                                       |\r\n| [drop](#drop)                | `function`              | pin dropped event                                                          |\r\n| [drag](#drag)                | `function`              | pin dragging event                                                         |\r\n| [done](#done)                | `function`              | closing of the dialog window is depend to this function                    |\r\n\r\n\r\n#### init\r\nInitialize the pin coordinates.\r\n```javascript\r\n$('.pin').easypin({\r\n    init: {\r\n        \"example_image1\":{\r\n            \"0\":{\r\n                \"content\":\"Captan America\",\r\n                \"coords\":{\r\n                    \"lat\":\"530\",\r\n                    \"long\":\"179\"\r\n                }\r\n            },\r\n            \"canvas\":{\r\n                \"src\":\"example.jpg\",\"width\":\"1000\",\"height\":\"562\"\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n#### markerSrc\r\nChange the default marker image\r\n```javascript\r\n$('.pin').easypin({\r\n    markerSrc: 'path/or/url/example-marker.jpg'\r\n});\r\n```\r\n\r\n#### modalWidth\r\nChange the default modal width\r\n```javascript\r\n$('.pin').easypin({\r\n    modalWidth: 300\r\n});\r\n```\r\n\r\n#### editSrc\r\nChange the default edit button image\r\n```javascript\r\n$('.pin').easypin({\r\n    editSrc: 'path/or/url/example-edit.jpg'\r\n});\r\n```\r\n\r\n#### deleteSrc\r\nChange the default delete button image\r\n```javascript\r\n$('.pin').easypin({\r\n    deleteSrc: 'path/or/url/example-delete.jpg'\r\n});\r\n```\r\n\r\n#### popover\r\nSet callback all template variables\r\n```javascript\r\n$('.pin').easypin({\r\n    popover: {\r\n        content: function(value) {\r\n            return value.replace(/\\s+/g, ' ');\r\n        }\r\n    }\r\n});\r\n```\r\n> It **content** variable is form input name\r\n\r\n#### popoverStyle\r\nPopover styles (it just pass to jquery .css() method)\r\n```javascript\r\n$('.pin').easypin({\r\n    popover: {\r\n        content: function(value) {\r\n            return value.replace(/\\s+/g, ' ');\r\n        }\r\n    },\r\n    popoverStyle: {\r\n        'background-color': 'orange',\r\n        'color': 'black'\r\n    }\r\n});\r\n```\r\n\r\n#### limit\r\nLimited pin (default 0) 0 for limitless\r\n```javascript\r\n$('.pin').easypin({\r\n    limit: 2\r\n});\r\n```\r\n> Set 0 for limitless pin\r\n\r\n#### exceeded()\r\nLimit exceeded event\r\n```javascript\r\n$('.pin').easypin({\r\n    limit: 2,\r\n    exceeded: function(type) {\r\n        // do samething...\r\n    }\r\n});\r\n```\r\n\r\n#### drop()\r\nPin dropped event\r\n\r\n```javascript\r\n$('.pin').easypin({\r\n    drop: function(x, y, element) {\r\n        console.log(x, y, element);\r\n    }\r\n});\r\n```\r\n\r\n#### drag()\r\nPin dragging event\r\n```javascript\r\n$('.pin').easypin({\r\n    drop: function(x, y, element) {\r\n        console.log(x, y, element);\r\n    },\r\n    drag: function(x, y, element) {\r\n        console.log(x, y, element);\r\n    }\r\n});\r\n```\r\n\r\n#### done()\r\nClosing of the dialog window is depend to this function. Return true if the result dialog window will be closed\r\n```javascript\r\n$('.pin').easypin({\r\n    done: function(element) {\r\n\r\n        return true;\r\n\r\n    }\r\n});\r\n```\r\n> Will return the form objects if the dialog box contains the form objects. Otherwise the dialog box will return the objects\r\n\r\n\r\n.easypinShow({}) options\r\n=================\r\n\r\n|      option                  | type                      | description                                                                |\r\n| ---------------------------- | ------------------------- | -------------------------------------------------------------------------- |\r\n| [data](#data)                | `object or json string`   | Pin data and coordinates                                                   |\r\n| [responsive](#responsive)    | `boolean (default: false)`| Reponsive canvas for mobile                                                |\r\n| [variables](#variables)      | `functions into object`   | Set callback all template variables                                        |\r\n| [popover](#popover)          | `object`                  | There is two child element. show/animate (default: false)                  |\r\n| [each](#each)                | `function`                | Each element works before replacing                                        |\r\n| [error](#error)              | `function`                | Process error event                                                        |\r\n| [success](#success)          | `function`                | Process success event                                                      |\r\n\r\n#### data\r\nPin data and coordinates\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {\r\n        \"example_image1\":{\r\n            \"0\":{\r\n                \"content\":\"Hello World!\",\r\n                \"coords\":{\r\n                    \"lat\":\"530\",\r\n                    \"long\":\"179\"\r\n                }\r\n            },\r\n            \"canvas\":{\r\n                \"src\":\"example.jpg\",\"width\":\"800\",\"height\":\"562\"\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n### responsive\r\nReponsive canvas for mobile (dfault: false)\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {/*json object*/},\r\n    responsive: true\r\n});\r\n```\r\n\r\n### variables\r\nReponsive canvas for mobile\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {/*json object*/},\r\n    responsive: true,\r\n    variables: {\r\n        content: function(canvas_id, pin_id, data) {\r\n\r\n            // do something...\r\n            // and return\r\n            return data;\r\n        }\r\n    }\r\n});\r\n```\r\n> **content** is a template variable.\r\n\r\n### popover\r\nThere is two child element. show/animate (default: false)\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {/*json object*/},\r\n    responsive: true,\r\n    variables: {\r\n        content: function(canvas_id, pin_id, data) {\r\n\r\n            // do something...\r\n            // and return\r\n            return data;\r\n        }\r\n    },\r\n    popover: {\r\n        show: true,\r\n        animate: true\r\n    }\r\n});\r\n```\r\n\r\n### each()\r\nEach element works before replacing.\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {/*json object*/},\r\n    responsive: true,\r\n    variables: {\r\n        content: function(canvas_id, pin_id, data) {\r\n\r\n            // do something...\r\n            // and return\r\n            return data;\r\n        }\r\n    },\r\n    popover: {\r\n        show: true,\r\n        animate: true\r\n    },\r\n    each: function(index, data) {\r\n\r\n        // do something\r\n        // and return\r\n        return data;\r\n    }\r\n});\r\n```\r\n\r\n### error()\r\nProcess error event\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {/*json object*/},\r\n    responsive: true,\r\n    variables: {\r\n        content: function(canvas_id, pin_id, data) {\r\n\r\n            // do something...\r\n            // and return\r\n            return data;\r\n        }\r\n    },\r\n    popover: {\r\n        show: true,\r\n        animate: true\r\n    },\r\n    each: function(index, data) {\r\n\r\n        // do something\r\n        // and return\r\n        return data;\r\n    },\r\n    error: function(e) {\r\n        // do something...\r\n    }\r\n});\r\n```\r\n\r\n### success()\r\nProcess success event\r\n```javascript\r\n$('.pin').easypinShow({\r\n    data: {/*json object*/},\r\n    responsive: true,\r\n    variables: {\r\n        content: function(canvas_id, pin_id, data) {\r\n\r\n            // do something...\r\n            // and return\r\n            return data;\r\n        }\r\n    },\r\n    popover: {\r\n        show: true,\r\n        animate: true\r\n    },\r\n    each: function(index, data) {\r\n\r\n        // do something\r\n        // and return\r\n        return data;\r\n    },\r\n    error: function(e) {\r\n        // do something...\r\n    },\r\n    success: function() {\r\n\r\n    }\r\n});\r\n```","google":"UA-73375746-1","note":"Don't delete this file! It's used internally to help with page regeneration."}